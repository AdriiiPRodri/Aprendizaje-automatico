#
# digitos.train[1:4] # etiquetas correspondientes a las 4 imágenes
# 2º. Vamos a obtener la intensidad media de nuestro dataset:
intesidad.train = apply(X = grises.train, MARGIN = 1, FUN = mean) # Intensidad de cada uno de los numeros(599)
intesidad.test = apply(X = grises.test, MARGIN = 1, FUN = mean)
# 3º. Vamos a obtener la simetria respecto al eje vertical de nuestro dataset:
simetria.train = apply(X = grises.train, MARGIN = 1, FUN = fSimetria) # Simetria de cada uno de los numeros(599)
simetria.test = apply(X = grises.test, MARGIN = 1, FUN = fSimetria) # Simetria de cada uno de los numeros(599)
rm(grises.train) # Liberamos memoria pues ya no necesitamos a grises
rm(grises.test)
# 4º. Vamos a recodificar nuestras etiquetas, cambiando el 5 por -1
digitos.train[digitos.train == 5] = -1
digitos.test[digitos.test == 5] = -1
# 5º. Componemos datosTr, que es la unión por columnas de la intensidad con la simetria, columna 1 = intesidad, columna 2 = simetria
datosTr = as.matrix(cbind(intesidad.train, simetria.train))
datosTst = as.matrix(cbind(intesidad.test, simetria.test))
# Introducimos la variable independiente (1) en nuestros datos de intesidad y simetria
indep = vector("numeric", length = ndigitos.train)
indep_test = vector("numeric", length = ndigitos.test)
indep[indep == 0] = 1
indep_test[indep_test == 0] = 1
datosTr = cbind(datosTr, indep)
datosTst = cbind(datosTst, indep_test)
# REGRESION CON PSEUDO-INVERSA
coeficientes = Regress_Lin(datosTr, digitos.train)
datosTr = datosTr
datosTst = datosTst
tpesos = t(coeficientes)
prediccion_train = h(tpesos, datosTr)
fallos_train = prediccion_train == digitos.train
Ein = length(fallos_train[fallos_train != 1]) / ndigitos.train
prediccion_test = h(tpesos, datosTst)
fallos_test = prediccion_test == digitos.test
Eout = length(fallos_test[fallos_test != 1]) / ndigitos.test
plot(intesidad.train, simetria.train, col = digitos.train + 3, type = "p", xlim = c(min(datosTr[,1]),max(datosTr[,1])), ylim = c(min(datosTst[1,]), 0))
x = c(min(datosTr[,1]),max(datosTr[,1]))
y = c(pasoARecta(tpesos)[1]*x[1] + pasoARecta(tpesos)[2], pasoARecta(tpesos)[1]*x[2] + pasoARecta(tpesos)[2])
lines(x, y, type = "l", col = "green")
plot(datosTst, col = digitos.test + 3, type = "p", xlim = c(min(datosTr[,1]),max(datosTr[,1])), ylim = c(min(datosTst[1,]), 0))
x = c(min(datosTst[,1]),max(datosTst[,1]))
y = c(pasoARecta(tpesos)[1]*x[1] + pasoARecta(tpesos)[2], pasoARecta(tpesos)[1]*x[2] + pasoARecta(tpesos)[2])
lines(x, y, type = "l", col = "green")
# ^^
# Autor: Adrián Jesús Peña Rodríguez
# Ejercicio 2:
# APARTADO A
# Función que calcula la simetria de cada ejemplo de nuestro dataset
fSimetria <- function(A){
A = abs(A-A[,ncol(A):1])
-sum(A)
}
# Regress_Lin, para la obtención de pesos del modelo lineal
Regress_Lin = function(datos, digitos){
pseudo = svd(datos)
pinversa = pseudo$v %*% diag(1/pseudo$d) %*% t(pseudo$u) # Formula para obtener la pseudo inversa
return (pinversa %*% digitos)
}
pasoARecta = function(w){
if(length(w)!= 3)
stop("Solo tiene sentido con 3 pesos")
a = -w[1]/w[2]
b = -w[3]/w[2]
c(a,b)
}
h = function(w, x) {
sign(w %*% t(x))
}
# Preparacion de los datos
# 1º. Lectura zip del train y del test y asignación a una variable
digit.train <- read.table("zip.train", quote="\"", comment.char="", stringsAsFactors=FALSE)
digit.test <- read.table("zip.test", quote="\"", comment.char="", stringsAsFactors=TRUE)
# Ahora nos quedamos solamente con los 1 y los 5
digitos15.train = digit.train[digit.train$V1==1 | digit.train$V1==5,]
digitos15.test = digit.test[digit.test$V1==1 | digit.test$V1==5,]
digitos.train = digitos15.train[,1]    # vector de etiquetas(clases) del train, en este caso columna 1
ndigitos.train = nrow(digitos15.train)  # numero de muestras del train
digitos.test = digitos15.test[,1]    # vector de etiquetas(clases) del test, en este caso columna 1
ndigitos.test = nrow(digitos15.test)  # numero de muestras del test
# se retira la clase y se monta una matriz 3D: 599*16*16
grises.train = array(unlist(subset(digitos15.train,select=-V1)),c(ndigitos.train,16,16)) # Cada numero esta representado en una matriz 16x16
rm(digit.train)
rm(digitos15.train)
# Ahora con el test
grises.test = array(unlist(subset(digitos15.test,select=-V1)),c(ndigitos.test,16,16))
rm(digit.test)
rm(digitos15.test)
# par(mfrow=c(2,2))
# for(i in 1:4){
#   imagen = grises.train[i,,16:1] # se rota para verlo bien
#   image(z=imagen)
# }
#
# digitos.train[1:4] # etiquetas correspondientes a las 4 imágenes
# 2º. Vamos a obtener la intensidad media de nuestro dataset:
intesidad.train = apply(X = grises.train, MARGIN = 1, FUN = mean) # Intensidad de cada uno de los numeros(599)
intesidad.test = apply(X = grises.test, MARGIN = 1, FUN = mean)
# 3º. Vamos a obtener la simetria respecto al eje vertical de nuestro dataset:
simetria.train = apply(X = grises.train, MARGIN = 1, FUN = fSimetria) # Simetria de cada uno de los numeros(599)
simetria.test = apply(X = grises.test, MARGIN = 1, FUN = fSimetria) # Simetria de cada uno de los numeros(599)
rm(grises.train) # Liberamos memoria pues ya no necesitamos a grises
rm(grises.test)
# 4º. Vamos a recodificar nuestras etiquetas, cambiando el 5 por -1
digitos.train[digitos.train == 5] = -1
digitos.test[digitos.test == 5] = -1
# 5º. Componemos datosTr, que es la unión por columnas de la intensidad con la simetria, columna 1 = intesidad, columna 2 = simetria
datosTr = as.matrix(cbind(intesidad.train, simetria.train))
datosTst = as.matrix(cbind(intesidad.test, simetria.test))
# Introducimos la variable independiente (1) en nuestros datos de intesidad y simetria
indep = vector("numeric", length = ndigitos.train)
indep_test = vector("numeric", length = ndigitos.test)
indep[indep == 0] = 1
indep_test[indep_test == 0] = 1
datosTr = cbind(datosTr, indep)
datosTst = cbind(datosTst, indep_test)
# REGRESION CON PSEUDO-INVERSA
coeficientes = Regress_Lin(datosTr, digitos.train)
datosTr = datosTr
datosTst = datosTst
tpesos = t(coeficientes)
prediccion_train = h(tpesos, datosTr)
fallos_train = prediccion_train == digitos.train
Ein = length(fallos_train[fallos_train != 1]) / ndigitos.train
prediccion_test = h(tpesos, datosTst)
fallos_test = prediccion_test == digitos.test
Eout = length(fallos_test[fallos_test != 1]) / ndigitos.test
plot(intesidad.train, simetria.train, col = digitos.train + 3, type = "p", xlim = c(min(datosTr[,1]),max(datosTr[,1])), ylim = c(min(datosTst[1,]), 0))
x = c(min(datosTr[,1]),max(datosTr[,1]))
y = c(pasoARecta(tpesos)[1]*x[1] + pasoARecta(tpesos)[2], pasoARecta(tpesos)[1]*x[2] + pasoARecta(tpesos)[2])
lines(x, y, type = "l", col = "green")
plot(datosTst, col = digitos.test + 3, type = "p", xlim = c(min(datosTst[,1]),max(datosTst[,1])), ylim = c(min(datosTst[1,]), 0))
x = c(min(datosTst[,1]),max(datosTst[,1]))
y = c(pasoARecta(tpesos)[1]*x[1] + pasoARecta(tpesos)[2], pasoARecta(tpesos)[1]*x[2] + pasoARecta(tpesos)[2])
lines(x, y, type = "l", col = "green")
# ^^
# Autor: Adrián Jesús Peña Rodríguez
# Ejercicio 2:
# APARTADO A
# Función que calcula la simetria de cada ejemplo de nuestro dataset
fSimetria <- function(A){
A = abs(A-A[,ncol(A):1])
-sum(A)
}
# Regress_Lin, para la obtención de pesos del modelo lineal
Regress_Lin = function(datos, digitos){
pseudo = svd(datos)
pinversa = pseudo$v %*% diag(1/pseudo$d) %*% t(pseudo$u) # Formula para obtener la pseudo inversa
return (pinversa %*% digitos)
}
pasoARecta = function(w){
if(length(w)!= 3)
stop("Solo tiene sentido con 3 pesos")
a = -w[1]/w[2]
b = -w[3]/w[2]
c(a,b)
}
h = function(w, x) {
sign(w %*% t(x))
}
# Preparacion de los datos
# 1º. Lectura zip del train y del test y asignación a una variable
digit.train <- read.table("zip.train", quote="\"", comment.char="", stringsAsFactors=FALSE)
digit.test <- read.table("zip.test", quote="\"", comment.char="", stringsAsFactors=TRUE)
# Ahora nos quedamos solamente con los 1 y los 5
digitos15.train = digit.train[digit.train$V1==1 | digit.train$V1==5,]
digitos15.test = digit.test[digit.test$V1==1 | digit.test$V1==5,]
digitos.train = digitos15.train[,1]    # vector de etiquetas(clases) del train, en este caso columna 1
ndigitos.train = nrow(digitos15.train)  # numero de muestras del train
digitos.test = digitos15.test[,1]    # vector de etiquetas(clases) del test, en este caso columna 1
ndigitos.test = nrow(digitos15.test)  # numero de muestras del test
# se retira la clase y se monta una matriz 3D: 599*16*16
grises.train = array(unlist(subset(digitos15.train,select=-V1)),c(ndigitos.train,16,16)) # Cada numero esta representado en una matriz 16x16
rm(digit.train)
rm(digitos15.train)
# Ahora con el test
grises.test = array(unlist(subset(digitos15.test,select=-V1)),c(ndigitos.test,16,16))
rm(digit.test)
rm(digitos15.test)
# par(mfrow=c(2,2))
# for(i in 1:4){
#   imagen = grises.train[i,,16:1] # se rota para verlo bien
#   image(z=imagen)
# }
#
# digitos.train[1:4] # etiquetas correspondientes a las 4 imágenes
# 2º. Vamos a obtener la intensidad media de nuestro dataset:
intesidad.train = apply(X = grises.train, MARGIN = 1, FUN = mean) # Intensidad de cada uno de los numeros(599)
intesidad.test = apply(X = grises.test, MARGIN = 1, FUN = mean)
# 3º. Vamos a obtener la simetria respecto al eje vertical de nuestro dataset:
simetria.train = apply(X = grises.train, MARGIN = 1, FUN = fSimetria) # Simetria de cada uno de los numeros(599)
simetria.test = apply(X = grises.test, MARGIN = 1, FUN = fSimetria) # Simetria de cada uno de los numeros(599)
rm(grises.train) # Liberamos memoria pues ya no necesitamos a grises
rm(grises.test)
# 4º. Vamos a recodificar nuestras etiquetas, cambiando el 5 por -1
digitos.train[digitos.train == 5] = -1
digitos.test[digitos.test == 5] = -1
# 5º. Componemos datosTr, que es la unión por columnas de la intensidad con la simetria, columna 1 = intesidad, columna 2 = simetria
datosTr = as.matrix(cbind(intesidad.train, simetria.train))
datosTst = as.matrix(cbind(intesidad.test, simetria.test))
# Introducimos la variable independiente (1) en nuestros datos de intesidad y simetria
indep = vector("numeric", length = ndigitos.train)
indep_test = vector("numeric", length = ndigitos.test)
indep[indep == 0] = 1
indep_test[indep_test == 0] = 1
datosTr = cbind(datosTr, indep)
datosTst = cbind(datosTst, indep_test)
# REGRESION CON PSEUDO-INVERSA
coeficientes = Regress_Lin(datosTr, digitos.train)
datosTr = datosTr
datosTst = datosTst
tpesos = t(coeficientes)
prediccion_train = h(tpesos, datosTr)
fallos_train = prediccion_train == digitos.train
Ein = length(fallos_train[fallos_train != 1]) / ndigitos.train
prediccion_test = h(tpesos, datosTst)
fallos_test = prediccion_test == digitos.test
Eout = length(fallos_test[fallos_test != 1]) / ndigitos.test
plot(intesidad.train, simetria.train, col = digitos.train + 3, type = "p", xlim = c(min(datosTr[,1]),max(datosTr[,1])), ylim = c(min(datosTst[1,]), 0))
x = c(min(datosTr[,1]),max(datosTr[,1]))
y = c(pasoARecta(tpesos)[1]*x[1] + pasoARecta(tpesos)[2], pasoARecta(tpesos)[1]*x[2] + pasoARecta(tpesos)[2])
lines(x, y, type = "l", col = "green")
plot(datosTst, col = digitos.test + 3, type = "p", xlim = c(min(datosTst[,1]),max(datosTst[,1])), ylim = c(min(datosTst[,1]), 0))
x = c(min(datosTst[,1]),max(datosTst[,1]))
y = c(pasoARecta(tpesos)[1]*x[1] + pasoARecta(tpesos)[2], pasoARecta(tpesos)[1]*x[2] + pasoARecta(tpesos)[2])
lines(x, y, type = "l", col = "green")
# ^^
View(datosTst)
min(datosTst[1,])
# Autor: Adrián Jesús Peña Rodríguez
# Ejercicio 2:
# APARTADO A
# Función que calcula la simetria de cada ejemplo de nuestro dataset
fSimetria <- function(A){
A = abs(A-A[,ncol(A):1])
-sum(A)
}
# Regress_Lin, para la obtención de pesos del modelo lineal
Regress_Lin = function(datos, digitos){
pseudo = svd(datos)
pinversa = pseudo$v %*% diag(1/pseudo$d) %*% t(pseudo$u) # Formula para obtener la pseudo inversa
return (pinversa %*% digitos)
}
pasoARecta = function(w){
if(length(w)!= 3)
stop("Solo tiene sentido con 3 pesos")
a = -w[1]/w[2]
b = -w[3]/w[2]
c(a,b)
}
h = function(w, x) {
sign(w %*% t(x))
}
# Preparacion de los datos
# 1º. Lectura zip del train y del test y asignación a una variable
digit.train <- read.table("zip.train", quote="\"", comment.char="", stringsAsFactors=FALSE)
digit.test <- read.table("zip.test", quote="\"", comment.char="", stringsAsFactors=TRUE)
# Ahora nos quedamos solamente con los 1 y los 5
digitos15.train = digit.train[digit.train$V1==1 | digit.train$V1==5,]
digitos15.test = digit.test[digit.test$V1==1 | digit.test$V1==5,]
digitos.train = digitos15.train[,1]    # vector de etiquetas(clases) del train, en este caso columna 1
ndigitos.train = nrow(digitos15.train)  # numero de muestras del train
digitos.test = digitos15.test[,1]    # vector de etiquetas(clases) del test, en este caso columna 1
ndigitos.test = nrow(digitos15.test)  # numero de muestras del test
# se retira la clase y se monta una matriz 3D: 599*16*16
grises.train = array(unlist(subset(digitos15.train,select=-V1)),c(ndigitos.train,16,16)) # Cada numero esta representado en una matriz 16x16
rm(digit.train)
rm(digitos15.train)
# Ahora con el test
grises.test = array(unlist(subset(digitos15.test,select=-V1)),c(ndigitos.test,16,16))
rm(digit.test)
rm(digitos15.test)
# par(mfrow=c(2,2))
# for(i in 1:4){
#   imagen = grises.train[i,,16:1] # se rota para verlo bien
#   image(z=imagen)
# }
#
# digitos.train[1:4] # etiquetas correspondientes a las 4 imágenes
# 2º. Vamos a obtener la intensidad media de nuestro dataset:
intesidad.train = apply(X = grises.train, MARGIN = 1, FUN = mean) # Intensidad de cada uno de los numeros(599)
intesidad.test = apply(X = grises.test, MARGIN = 1, FUN = mean)
# 3º. Vamos a obtener la simetria respecto al eje vertical de nuestro dataset:
simetria.train = apply(X = grises.train, MARGIN = 1, FUN = fSimetria) # Simetria de cada uno de los numeros(599)
simetria.test = apply(X = grises.test, MARGIN = 1, FUN = fSimetria) # Simetria de cada uno de los numeros(599)
rm(grises.train) # Liberamos memoria pues ya no necesitamos a grises
rm(grises.test)
# 4º. Vamos a recodificar nuestras etiquetas, cambiando el 5 por -1
digitos.train[digitos.train == 5] = -1
digitos.test[digitos.test == 5] = -1
# 5º. Componemos datosTr, que es la unión por columnas de la intensidad con la simetria, columna 1 = intesidad, columna 2 = simetria
datosTr = as.matrix(cbind(intesidad.train, simetria.train))
datosTst = as.matrix(cbind(intesidad.test, simetria.test))
# Introducimos la variable independiente (1) en nuestros datos de intesidad y simetria
indep = vector("numeric", length = ndigitos.train)
indep_test = vector("numeric", length = ndigitos.test)
indep[indep == 0] = 1
indep_test[indep_test == 0] = 1
datosTr = cbind(datosTr, indep)
datosTst = cbind(datosTst, indep_test)
# REGRESION CON PSEUDO-INVERSA
coeficientes = Regress_Lin(datosTr, digitos.train)
datosTr = datosTr
datosTst = datosTst
tpesos = t(coeficientes)
prediccion_train = h(tpesos, datosTr)
fallos_train = prediccion_train == digitos.train
Ein = length(fallos_train[fallos_train != 1]) / ndigitos.train
prediccion_test = h(tpesos, datosTst)
fallos_test = prediccion_test == digitos.test
Eout = length(fallos_test[fallos_test != 1]) / ndigitos.test
plot(intesidad.train, simetria.train, col = digitos.train + 3, type = "p", xlim = c(min(datosTr[,1]),max(datosTr[,1])), ylim = c(min(datosTst[2,]), 0))
x = c(min(datosTr[,1]),max(datosTr[,1]))
y = c(pasoARecta(tpesos)[1]*x[1] + pasoARecta(tpesos)[2], pasoARecta(tpesos)[1]*x[2] + pasoARecta(tpesos)[2])
lines(x, y, type = "l", col = "green")
plot(datosTst, col = digitos.test + 3, type = "p", xlim = c(min(datosTst[,1]),max(datosTst[,1])), ylim = c(min(datosTst[2,]), 0))
x = c(min(datosTst[,1]),max(datosTst[,1]))
y = c(pasoARecta(tpesos)[1]*x[1] + pasoARecta(tpesos)[2], pasoARecta(tpesos)[1]*x[2] + pasoARecta(tpesos)[2])
lines(x, y, type = "l", col = "green")
# ^^
min(datosTst[2,])
View(datosTst)
min(datosTst[,1])
min(datosTst[,2])
# Autor: Adrián Jesús Peña Rodríguez
# Ejercicio 2:
# APARTADO A
# Función que calcula la simetria de cada ejemplo de nuestro dataset
fSimetria <- function(A){
A = abs(A-A[,ncol(A):1])
-sum(A)
}
# Regress_Lin, para la obtención de pesos del modelo lineal
Regress_Lin = function(datos, digitos){
pseudo = svd(datos)
pinversa = pseudo$v %*% diag(1/pseudo$d) %*% t(pseudo$u) # Formula para obtener la pseudo inversa
return (pinversa %*% digitos)
}
pasoARecta = function(w){
if(length(w)!= 3)
stop("Solo tiene sentido con 3 pesos")
a = -w[1]/w[2]
b = -w[3]/w[2]
c(a,b)
}
h = function(w, x) {
sign(w %*% t(x))
}
# Preparacion de los datos
# 1º. Lectura zip del train y del test y asignación a una variable
digit.train <- read.table("zip.train", quote="\"", comment.char="", stringsAsFactors=FALSE)
digit.test <- read.table("zip.test", quote="\"", comment.char="", stringsAsFactors=TRUE)
# Ahora nos quedamos solamente con los 1 y los 5
digitos15.train = digit.train[digit.train$V1==1 | digit.train$V1==5,]
digitos15.test = digit.test[digit.test$V1==1 | digit.test$V1==5,]
digitos.train = digitos15.train[,1]    # vector de etiquetas(clases) del train, en este caso columna 1
ndigitos.train = nrow(digitos15.train)  # numero de muestras del train
digitos.test = digitos15.test[,1]    # vector de etiquetas(clases) del test, en este caso columna 1
ndigitos.test = nrow(digitos15.test)  # numero de muestras del test
# se retira la clase y se monta una matriz 3D: 599*16*16
grises.train = array(unlist(subset(digitos15.train,select=-V1)),c(ndigitos.train,16,16)) # Cada numero esta representado en una matriz 16x16
rm(digit.train)
rm(digitos15.train)
# Ahora con el test
grises.test = array(unlist(subset(digitos15.test,select=-V1)),c(ndigitos.test,16,16))
rm(digit.test)
rm(digitos15.test)
# par(mfrow=c(2,2))
# for(i in 1:4){
#   imagen = grises.train[i,,16:1] # se rota para verlo bien
#   image(z=imagen)
# }
#
# digitos.train[1:4] # etiquetas correspondientes a las 4 imágenes
# 2º. Vamos a obtener la intensidad media de nuestro dataset:
intesidad.train = apply(X = grises.train, MARGIN = 1, FUN = mean) # Intensidad de cada uno de los numeros(599)
intesidad.test = apply(X = grises.test, MARGIN = 1, FUN = mean)
# 3º. Vamos a obtener la simetria respecto al eje vertical de nuestro dataset:
simetria.train = apply(X = grises.train, MARGIN = 1, FUN = fSimetria) # Simetria de cada uno de los numeros(599)
simetria.test = apply(X = grises.test, MARGIN = 1, FUN = fSimetria) # Simetria de cada uno de los numeros(599)
rm(grises.train) # Liberamos memoria pues ya no necesitamos a grises
rm(grises.test)
# 4º. Vamos a recodificar nuestras etiquetas, cambiando el 5 por -1
digitos.train[digitos.train == 5] = -1
digitos.test[digitos.test == 5] = -1
# 5º. Componemos datosTr, que es la unión por columnas de la intensidad con la simetria, columna 1 = intesidad, columna 2 = simetria
datosTr = as.matrix(cbind(intesidad.train, simetria.train))
datosTst = as.matrix(cbind(intesidad.test, simetria.test))
# Introducimos la variable independiente (1) en nuestros datos de intesidad y simetria
indep = vector("numeric", length = ndigitos.train)
indep_test = vector("numeric", length = ndigitos.test)
indep[indep == 0] = 1
indep_test[indep_test == 0] = 1
datosTr = cbind(datosTr, indep)
datosTst = cbind(datosTst, indep_test)
# REGRESION CON PSEUDO-INVERSA
coeficientes = Regress_Lin(datosTr, digitos.train)
datosTr = datosTr
datosTst = datosTst
tpesos = t(coeficientes)
prediccion_train = h(tpesos, datosTr)
fallos_train = prediccion_train == digitos.train
Ein = length(fallos_train[fallos_train != 1]) / ndigitos.train
prediccion_test = h(tpesos, datosTst)
fallos_test = prediccion_test == digitos.test
Eout = length(fallos_test[fallos_test != 1]) / ndigitos.test
plot(intesidad.train, simetria.train, col = digitos.train + 3, type = "p", xlim = c(min(datosTr[,1]),max(datosTr[,1])), ylim = c(min(datosTst[,2]), 0))
x = c(min(datosTr[,1]),max(datosTr[,1]))
y = c(pasoARecta(tpesos)[1]*x[1] + pasoARecta(tpesos)[2], pasoARecta(tpesos)[1]*x[2] + pasoARecta(tpesos)[2])
lines(x, y, type = "l", col = "green")
plot(datosTst, col = digitos.test + 3, type = "p", xlim = c(min(datosTst[,1]),max(datosTst[,1])), ylim = c(min(datosTst[,2]), 0))
x = c(min(datosTst[,1]),max(datosTst[,1]))
y = c(pasoARecta(tpesos)[1]*x[1] + pasoARecta(tpesos)[2], pasoARecta(tpesos)[1]*x[2] + pasoARecta(tpesos)[2])
lines(x, y, type = "l", col = "green")
# ^^
plot(intesidad.train, simetria.train, col = digitos.train + 3, type = "p", xlim = c(min(datosTr[,1]),max(datosTr[,1])), ylim = c(min(datosTst[,2]), 0))
x = c(min(datosTr[,1]),max(datosTr[,1]))
y = c(pasoARecta(tpesos)[1]*x[1] + pasoARecta(tpesos)[2], pasoARecta(tpesos)[1]*x[2] + pasoARecta(tpesos)[2])
lines(x, y, type = "l", col = "green")
# Autor: Adrián Jesús Peña Rodríguez
# Ejercicio 2:
# APARTADO A
# Función que calcula la simetria de cada ejemplo de nuestro dataset
fSimetria <- function(A){
A = abs(A-A[,ncol(A):1])
-sum(A)
}
# Regress_Lin, para la obtención de pesos del modelo lineal
Regress_Lin = function(datos, digitos){
pseudo = svd(datos)
pinversa = pseudo$v %*% diag(1/pseudo$d) %*% t(pseudo$u) # Formula para obtener la pseudo inversa
return (pinversa %*% digitos)
}
pasoARecta = function(w){
if(length(w)!= 3)
stop("Solo tiene sentido con 3 pesos")
a = -w[1]/w[2]
b = -w[3]/w[2]
c(a,b)
}
h = function(w, x) {
sign(w %*% t(x))
}
# Preparacion de los datos
# 1º. Lectura zip del train y del test y asignación a una variable
digit.train <- read.table("zip.train", quote="\"", comment.char="", stringsAsFactors=FALSE)
digit.test <- read.table("zip.test", quote="\"", comment.char="", stringsAsFactors=TRUE)
# Ahora nos quedamos solamente con los 1 y los 5
digitos15.train = digit.train[digit.train$V1==1 | digit.train$V1==5,]
digitos15.test = digit.test[digit.test$V1==1 | digit.test$V1==5,]
digitos.train = digitos15.train[,1]    # vector de etiquetas(clases) del train, en este caso columna 1
ndigitos.train = nrow(digitos15.train)  # numero de muestras del train
digitos.test = digitos15.test[,1]    # vector de etiquetas(clases) del test, en este caso columna 1
ndigitos.test = nrow(digitos15.test)  # numero de muestras del test
# se retira la clase y se monta una matriz 3D: 599*16*16
grises.train = array(unlist(subset(digitos15.train,select=-V1)),c(ndigitos.train,16,16)) # Cada numero esta representado en una matriz 16x16
rm(digit.train)
rm(digitos15.train)
# Ahora con el test
grises.test = array(unlist(subset(digitos15.test,select=-V1)),c(ndigitos.test,16,16))
rm(digit.test)
rm(digitos15.test)
# par(mfrow=c(2,2))
# for(i in 1:4){
#   imagen = grises.train[i,,16:1] # se rota para verlo bien
#   image(z=imagen)
# }
#
# digitos.train[1:4] # etiquetas correspondientes a las 4 imágenes
# 2º. Vamos a obtener la intensidad media de nuestro dataset:
intesidad.train = apply(X = grises.train, MARGIN = 1, FUN = mean) # Intensidad de cada uno de los numeros(599)
intesidad.test = apply(X = grises.test, MARGIN = 1, FUN = mean)
# 3º. Vamos a obtener la simetria respecto al eje vertical de nuestro dataset:
simetria.train = apply(X = grises.train, MARGIN = 1, FUN = fSimetria) # Simetria de cada uno de los numeros(599)
simetria.test = apply(X = grises.test, MARGIN = 1, FUN = fSimetria) # Simetria de cada uno de los numeros(599)
rm(grises.train) # Liberamos memoria pues ya no necesitamos a grises
rm(grises.test)
# 4º. Vamos a recodificar nuestras etiquetas, cambiando el 5 por -1
digitos.train[digitos.train == 5] = -1
digitos.test[digitos.test == 5] = -1
# 5º. Componemos datosTr, que es la unión por columnas de la intensidad con la simetria, columna 1 = intesidad, columna 2 = simetria
datosTr = as.matrix(cbind(intesidad.train, simetria.train))
datosTst = as.matrix(cbind(intesidad.test, simetria.test))
# Introducimos la variable independiente (1) en nuestros datos de intesidad y simetria
indep = vector("numeric", length = ndigitos.train)
indep_test = vector("numeric", length = ndigitos.test)
indep[indep == 0] = 1
indep_test[indep_test == 0] = 1
datosTr = cbind(datosTr, indep)
datosTst = cbind(datosTst, indep_test)
# REGRESION CON PSEUDO-INVERSA
coeficientes = Regress_Lin(datosTr, digitos.train)
datosTr = datosTr
datosTst = datosTst
tpesos = t(coeficientes)
prediccion_train = h(tpesos, datosTr)
fallos_train = prediccion_train == digitos.train
Ein = length(fallos_train[fallos_train != 1]) / ndigitos.train
prediccion_test = h(tpesos, datosTst)
fallos_test = prediccion_test == digitos.test
Eout = length(fallos_test[fallos_test != 1]) / ndigitos.test
plot(intesidad.train, simetria.train, col = digitos.train + 3, type = "p", xlim = c(min(datosTr[,1]),max(datosTr[,1])), ylim = c(min(datosTst[,2]), 0))
x = c(min(datosTr[,1]),max(datosTr[,1]))
y = c(pasoARecta(tpesos)[1]*x[1] + pasoARecta(tpesos)[2], pasoARecta(tpesos)[1]*x[2] + pasoARecta(tpesos)[2])
lines(x, y, type = "l", col = "green")
plot(datosTst, col = digitos.test + 3, type = "p", xlim = c(min(datosTr[,1]),max(datosTr[,1])), ylim = c(min(datosTst[,2]), 0))
x = c(min(datosTr[,1]),max(datosTr[,1]))
y = c(pasoARecta(tpesos)[1]*x[1] + pasoARecta(tpesos)[2], pasoARecta(tpesos)[1]*x[2] + pasoARecta(tpesos)[2])
lines(x, y, type = "l", col = "green")
# ^^
plot(intesidad.train, simetria.train, col = digitos.train + 3, type = "p", xlim = c(min(datosTr[,1]),max(datosTr[,1])), ylim = c(min(datosTst[,2]), 0))
x = c(min(datosTr[,1]),max(datosTr[,1]))
y = c(pasoARecta(tpesos)[1]*x[1] + pasoARecta(tpesos)[2], pasoARecta(tpesos)[1]*x[2] + pasoARecta(tpesos)[2])
lines(x, y, type = "l", col = "green")
