positivas = 0
negativas = 0
tope = length(muestra) * porcentaje
for(i in 1:N) {
if(muestra[posiciones[i]] == 1 & positivas < tope) {
muestra[posiciones[i]] = muestra[posiciones[i]] * -1
positivas = positivas + 1
}
else if(muestra[posiciones[i]] == -1 & negativas < tope) {
muestra[posiciones[i]] = muestra[posiciones[i]] * -1
negativas = negativas + 1
}
}
muestra
}
# 1.- EJERCICIOS SOBRE LA COMLEJIDAD DE H Y EL RUIDO
# Ejercicio 1
# a)
unif = simula_unif(N=50,dim=2,rango=c(-50,50))
unif = cbind(unif, 1)
plot(unif, col="green")
# b)
gaus = simula_gaus(N=50,dim=2,sigma=c(5,7))
plot(gaus,col="red")
# Ejercicio 2
signos = c()
recta = simula_recta(visible=F)
for(i in 1:dim(unif)[1]){
signos[i] = f(unif[i,1], unif[i,2], recta[1], recta[2])
}
# a)
plot(unif, col = signos + 3)
abline(recta[2],recta[1],col=3)
# b)
signos_ruido = genera_etiquetas_y_ruido(signos, 0.1)
plot(unif, col = signos_ruido + 3)
abline(recta[2],recta[1],col=3)
# Ejercicio 3
old.par = par(mfrow=c(2,2))
intervalo = c(-100,100)
plot(unif, col = signos_ruido + 3)
pintar_frontera(f1, intervalo)
plot(unif, col = signos_ruido + 3)
pintar_frontera(f2, intervalo)
plot(unif, col = signos_ruido + 3)
pintar_frontera(f3, intervalo)
plot(unif, col = signos_ruido + 3)
pintar_frontera(f4, intervalo)
# 2.- MODELOS LINEALES
# Ejercicio 1.- Algoritmo Perceptron
pasoARecta= function(w){
if(length(w)!= 3)
stop("Solo tiene sentido con 3 pesos")
a = -w[1]/w[2]
b = -w[3]/w[2]
c(a,b)
}
prediccion = function(w, x) {
sign(t(w) %*% t(t(x)))
}
ajusta_PLA = function(datos, label, max_iter, vini) {
weight = vini
iter = 0
converge = F
while(converge == F & iter < max_iter) {
converge = T
for(i in 1:dim(datos)[1]) {
mult = sum(weight * datos[i, ])
if(mult >= 0)
mult = 1
else
mult = -1
if(mult != label[i]) {
weight = weight + label[i] * datos[i, ]
converge = F
}
}
iter = iter + 1
}
fallos = 0
if(converge == F) {
for(i in 1:dim(datos)[1]) {
mult = prediccion(weight, datos[i, ])
if(mult != label[i]) {
fallos = fallos + 1
}
}
}
c(fallos, iter, weight)
}
old.par = par(mfrow=c(1,1))
# a)
##############
vini = rep(0, dim(unif)[2])
max_iter = 10000
pla = ajusta_PLA(unif, signos, max_iter, vini)
plot(unif, col = signos + 3)
abline(pasoARecta(pla[3:5])[2], pasoARecta(pla[3:5])[1], col = "green")
print("PLA con pesos iniciados a 0:")
print(sprintf("Fallos = %s", pla[1]))
print(sprintf("Iteraciones hasta converger = %s", pla[2]))
##############
media = 0
media_f = 0
iteraciones = 10
for(i in 1:iteraciones) {
pesos_iniciales = runif(n=dim(unif)[2], min=0, max=1)
pla = ajusta_PLA(unif, signos, max_iter, pesos_iniciales)
media = media + pla[2]
media_f = media_f + pla[1]
}
media = media / iteraciones
media_f = media_f / iteraciones
print("PLA con pesos iniciados aleatoriamente, media de las 10 ejecuciones:")
print(sprintf("Media de fallos = %s", media_f))
print(sprintf("Media de iteraciones hasta converger = %s", media))
##############
# b)
##############
pesos_iniciales = rep(0, dim(unif)[2])
pla = ajusta_PLA(unif, signos_ruido, max_iter, pesos_iniciales)
plot(unif, col = signos_ruido + 3)
abline(pasoARecta(pla[3:5])[2], pasoARecta(pla[3:5])[1], col = "green")
print("PLA con pesos a cero y ruido")
print(sprintf("Fallos = %s", pla[1]))
print(sprintf("Iteraciones hasta converger = %s", pla[2]))
##############
media = 0
media_f = 0
for(i in 1:iteraciones) {
pesos_iniciales = runif(n=dim(unif)[2], min=0, max=1)
pla = ajusta_PLA(unif, signos_ruido, max_iter, pesos_iniciales)
media = media + pla[2]
media_f = media_f + pla[1]
}
media = media / iteraciones
media_f = media_f / iteraciones
print("PLA con pesos iniciados aleatoriamente, media de las 10 ejecuciones:")
print(sprintf("Media de fallos = %s", media_f))
print(sprintf("Media de iteraciones hasta converger = %s", media))
##############
# Ejercicio 2.- Regresión logística
genera_recta = function (x, y){
a = (x[2] - y[2]) / (x[1]-y[1]) # calculo de la pendiente
b = x[2]-a*x[1]  # calculo del punto de corte
c(a,b) # devuelve el par pendiente y punto de corte
}
fSGD = function(x,y,a,b){
if (-y + a * x + b >= 0)
1
else
-1
}
# Preparando datos
datosRL = simula_unif(N=100,dim=2,rango=c(0,2))
datosRL = cbind(datosRL, 1)
puntos = sample(1:dim(datosRL)[1], 2, replace = FALSE)
rectaE = genera_recta(datosRL[puntos[1],], datosRL[puntos[2],])
x = c(min(datosRL[,1]),max(datosRL[,1]))
y = c(rectaE[1]*x[1] + rectaE[2], rectaE[1]*x[2] + rectaE[2])
etiquetas = c()
for(i in 1:dim(datosRL)[1]) {
etiquetas[i] = fSGD(datosRL[i, 1], datosRL[i, 2], rectaE[1], rectaE[2])
}
plot(datosRL, col = etiquetas + 3)
lines(x, y, type = "l", col = "green")
####################
# Gradiente descendiente estocástico
h = function(etiqueta, w, x) {   # Funcion sigmoide, esta es la h de la regresión logística
#(exp(etiqueta*w*x) / (exp(etiqueta*w*x)+1))
1 / (1 + exp(-(etiqueta*t(w)%*%x)))
}
SGD = function(datos, resultados, wini = c(0, 0, 0), nitr = 100000, nu = 0.01, tminibatches, tope = 0.01) {
numero_de_iteraciones = 0
sumatoria = c(0,0,0)
N = as.integer(length(resultados) * tminibatches)
wini_anterior = c(999,999,999)
while(abs(sum(wini_anterior) - sum(wini)) >= tope) {
sumatoria = c(0,0,0)
wini_anterior = wini
for(j in 1:N) {
aleatorio = sample(length(resultados),1)
sumatoria = sumatoria + (-as.vector(resultados[aleatorio] * datos[aleatorio,])) * as.vector(h(-resultados[aleatorio], wini, datos[aleatorio,]))
}
sumatoria = -sumatoria / N
wini = wini + nu * sumatoria
numero_de_iteraciones = numero_de_iteraciones + 1
}
fallos = 0
for(i in 1:dim(datos)[1]) {
mult = prediccion(wini, datos[i, ])
if(mult != etiquetas[i]) {
fallos = fallos + 1
}
}
print(fallos)
wini
}
pesosSGD = rep(0, dim(datosRL)[2])  # Pesos inicializados a 0
pesosSGD = SGD(datos = datosRL, resultados = etiquetas, nitr = 10000, tminibatches = 0.2, tope = 0.0000001)
x = c(min(datosRL[,1]),max(datosRL[,1]))
y = c(pasoARecta(pesosSGD)[1]*x[1] + pasoARecta(pesosSGD)[2], pasoARecta(pesosSGD)[1]*x[2] + pasoARecta(pesosSGD)[2])
plot(datosRL, col = etiquetas + 3)
abline(pasoARecta(pesosSGD)[2], pasoARecta(pesosSGD)[1], col = "green")
# b)
datosRL_out = simula_unif(N=1000,dim=2,rango=c(0,2))
datosRL_out = cbind(datosRL_out, 1)
x = c(min(datosRL_out[,1]),max(datosRL_out[,1]))
y = c(rectaE[1]*x[1] + rectaE[2], rectaE[1]*x[2] + rectaE[2])
etiquetas = c()
for(i in 1:dim(datosRL_out)[1]) {
etiquetas[i] = fSGD(datosRL_out[i, 1], datosRL_out[i, 2], rectaE[1], rectaE[2])
}
plot(datosRL_out, col = etiquetas + 3)
lines(x, y, type = "l", col = "green")
fallos = 0
for(i in 1:dim(datosRL_out)[1]) {
mult = prediccion(pesosSGD, datosRL_out[i, ])
if(mult >= 0.5)
mult = 1
else
mult = -1
if(mult != etiquetas[i]) {
fallos = fallos + 1
}
}
print(fallos)
plot(datosRL_out, col = etiquetas + 3)
abline(pasoARecta(pesosSGD)[2], pasoARecta(pesosSGD)[1], col = "green")
set.seed(3)
simula_unif = function (N=2,dim=2, rango = c(0,1)){
m = matrix(runif(N*dim, min=rango[1], max=rango[2]), nrow = N, ncol=dim, byrow=T)
m
}
simula_gaus = function(N=2,dim=2,sigma){
if (missing(sigma)) stop("Debe dar un vector de varianzas")
sigma = sqrt(sigma)  # para la generación se usa sd, y no la varianza
if(dim != length(sigma)) stop ("El numero de varianzas es distinto de la dimensión")
simula_gauss1 = function() rnorm(dim, sd = sigma) # genera 1 muestra, con las desviaciones especificadas
m = t(replicate(N,simula_gauss1())) # repite N veces, simula_gauss1 y se hace la traspuesta
m
}
simula_recta = function (intervalo = c(-1,1), visible=F){
ptos = simula_unif(2,2,intervalo) # se generan 2 puntos
a = (ptos[1,2] - ptos[2,2]) / (ptos[1,1]-ptos[2,1]) # calculo de la pendiente
b = ptos[1,2]-a*ptos[1,1]  # calculo del punto de corte
if (visible) {  # pinta la recta y los 2 puntos
if (dev.cur()==1) # no esta abierto el dispositivo lo abre con plot
plot(1, type="n", xlim=intervalo, ylim=intervalo)
points(ptos,col=3)  #pinta en verde los puntos
abline(b,a,col=3)   # y la recta
}
c(a,b) # devuelve el par pendiente y punto de corte
}
pintar_frontera = function(f,rango=c(-50,50)) {
x=y=seq(rango[1],rango[2],length.out = 500)
z = outer(x,y,FUN=f)
if (dev.cur()==1) # no esta abierto el dispositivo lo abre con plot
plot(1, type="n", xlim=rango, ylim=rango)
contour(x,y,z, levels = 1:20, xlim =rango, ylim=rango, xlab = "x", ylab = "y", add=TRUE, col="green")
}
f = function(x,y,a,b){
if (y - a * x - b >= 0)
1
else
-1
}
f1 = function(x, y){
(x-10)^2 + (y-20)^2 - 400
}
f2 = function(x,y){
0.5 * (x+10)^2 + (y-20)^2 - 400
}
f3 = function(x,y){
0.5 * (x-10)^2 - (y+20)^2 - 400
}
f4 = function(x,y){
y - 20*x^2 - 5*x + 3
}
genera_etiquetas_y_ruido = function(muestra, porcentaje) {
N = length(muestra)
posiciones = sample(1:length(muestra),length(muestra),replace=F)
positivas = 0
negativas = 0
tope = length(muestra) * porcentaje
for(i in 1:N) {
if(muestra[posiciones[i]] == 1 & positivas < tope) {
muestra[posiciones[i]] = muestra[posiciones[i]] * -1
positivas = positivas + 1
}
else if(muestra[posiciones[i]] == -1 & negativas < tope) {
muestra[posiciones[i]] = muestra[posiciones[i]] * -1
negativas = negativas + 1
}
}
muestra
}
# 1.- EJERCICIOS SOBRE LA COMLEJIDAD DE H Y EL RUIDO
# Ejercicio 1
# a)
unif = simula_unif(N=50,dim=2,rango=c(-50,50))
unif = cbind(unif, 1)
plot(unif, col="green")
# b)
gaus = simula_gaus(N=50,dim=2,sigma=c(5,7))
plot(gaus,col="red")
# Ejercicio 2
signos = c()
recta = simula_recta(visible=F)
for(i in 1:dim(unif)[1]){
signos[i] = f(unif[i,1], unif[i,2], recta[1], recta[2])
}
# a)
plot(unif, col = signos + 3)
abline(recta[2],recta[1],col=3)
# b)
signos_ruido = genera_etiquetas_y_ruido(signos, 0.1)
plot(unif, col = signos_ruido + 3)
abline(recta[2],recta[1],col=3)
# Ejercicio 3
old.par = par(mfrow=c(2,2))
intervalo = c(-100,100)
plot(unif, col = signos_ruido + 3)
pintar_frontera(f1, intervalo)
plot(unif, col = signos_ruido + 3)
pintar_frontera(f2, intervalo)
plot(unif, col = signos_ruido + 3)
pintar_frontera(f3, intervalo)
plot(unif, col = signos_ruido + 3)
pintar_frontera(f4, intervalo)
# 2.- MODELOS LINEALES
# Ejercicio 1.- Algoritmo Perceptron
pasoARecta= function(w){
if(length(w)!= 3)
stop("Solo tiene sentido con 3 pesos")
a = -w[1]/w[2]
b = -w[3]/w[2]
c(a,b)
}
prediccion = function(w, x) {
sign(t(w) %*% t(t(x)))
}
ajusta_PLA = function(datos, label, max_iter, vini) {
weight = vini
iter = 0
converge = F
while(converge == F & iter < max_iter) {
converge = T
for(i in 1:dim(datos)[1]) {
mult = sum(weight * datos[i, ])
if(mult >= 0)
mult = 1
else
mult = -1
if(mult != label[i]) {
weight = weight + label[i] * datos[i, ]
converge = F
}
}
iter = iter + 1
}
fallos = 0
if(converge == F) {
for(i in 1:dim(datos)[1]) {
mult = prediccion(weight, datos[i, ])
if(mult != label[i]) {
fallos = fallos + 1
}
}
}
c(fallos, iter, weight)
}
old.par = par(mfrow=c(1,1))
# a)
##############
vini = rep(0, dim(unif)[2])
max_iter = 10000
pla = ajusta_PLA(unif, signos, max_iter, vini)
plot(unif, col = signos + 3)
abline(pasoARecta(pla[3:5])[2], pasoARecta(pla[3:5])[1], col = "green")
print("PLA con pesos iniciados a 0:")
print(sprintf("Fallos = %s", pla[1]))
print(sprintf("Iteraciones hasta converger = %s", pla[2]))
##############
media = 0
media_f = 0
iteraciones = 10
for(i in 1:iteraciones) {
pesos_iniciales = runif(n=dim(unif)[2], min=0, max=1)
pla = ajusta_PLA(unif, signos, max_iter, pesos_iniciales)
media = media + pla[2]
media_f = media_f + pla[1]
}
media = media / iteraciones
media_f = media_f / iteraciones
print("PLA con pesos iniciados aleatoriamente, media de las 10 ejecuciones:")
print(sprintf("Media de fallos = %s", media_f))
print(sprintf("Media de iteraciones hasta converger = %s", media))
##############
# b)
##############
pesos_iniciales = rep(0, dim(unif)[2])
pla = ajusta_PLA(unif, signos_ruido, max_iter, pesos_iniciales)
plot(unif, col = signos_ruido + 3)
abline(pasoARecta(pla[3:5])[2], pasoARecta(pla[3:5])[1], col = "green")
print("PLA con pesos a cero y ruido")
print(sprintf("Fallos = %s", pla[1]))
print(sprintf("Iteraciones hasta converger = %s", pla[2]))
##############
media = 0
media_f = 0
for(i in 1:iteraciones) {
pesos_iniciales = runif(n=dim(unif)[2], min=0, max=1)
pla = ajusta_PLA(unif, signos_ruido, max_iter, pesos_iniciales)
media = media + pla[2]
media_f = media_f + pla[1]
}
media = media / iteraciones
media_f = media_f / iteraciones
print("PLA con pesos iniciados aleatoriamente, media de las 10 ejecuciones:")
print(sprintf("Media de fallos = %s", media_f))
print(sprintf("Media de iteraciones hasta converger = %s", media))
##############
# Ejercicio 2.- Regresión logística
genera_recta = function (x, y){
a = (x[2] - y[2]) / (x[1]-y[1]) # calculo de la pendiente
b = x[2]-a*x[1]  # calculo del punto de corte
c(a,b) # devuelve el par pendiente y punto de corte
}
fSGD = function(x,y,a,b){
if (-y + a * x + b >= 0)
1
else
-1
}
# Preparando datos
datosRL = simula_unif(N=100,dim=2,rango=c(0,2))
datosRL = cbind(datosRL, 1)
puntos = sample(1:dim(datosRL)[1], 2, replace = FALSE)
rectaE = genera_recta(datosRL[puntos[1],], datosRL[puntos[2],])
x = c(min(datosRL[,1]),max(datosRL[,1]))
y = c(rectaE[1]*x[1] + rectaE[2], rectaE[1]*x[2] + rectaE[2])
etiquetas = c()
for(i in 1:dim(datosRL)[1]) {
etiquetas[i] = fSGD(datosRL[i, 1], datosRL[i, 2], rectaE[1], rectaE[2])
}
plot(datosRL, col = etiquetas + 3)
lines(x, y, type = "l", col = "green")
####################
# Gradiente descendiente estocástico
h = function(etiqueta, w, x) {   # Funcion sigmoide, esta es la h de la regresión logística
#(exp(etiqueta*w*x) / (exp(etiqueta*w*x)+1))
1 / (1 + exp(-(etiqueta*t(w)%*%x)))
}
SGD = function(datos, resultados, wini = c(0, 0, 0), nitr = 100000, nu = 0.01, tminibatches, tope = 0.01) {
numero_de_iteraciones = 0
sumatoria = c(0,0,0)
N = as.integer(length(resultados) * tminibatches)
wini_anterior = c(999,999,999)
while(abs(sum(wini_anterior) - sum(wini)) >= tope) {
sumatoria = c(0,0,0)
wini_anterior = wini
for(j in 1:N) {
aleatorio = sample(length(resultados),1)
sumatoria = sumatoria + (-as.vector(resultados[aleatorio] * datos[aleatorio,])) * as.vector(h(-resultados[aleatorio], wini, datos[aleatorio,]))
}
sumatoria = -sumatoria / N
wini = wini + nu * sumatoria
numero_de_iteraciones = numero_de_iteraciones + 1
}
fallos = 0
for(i in 1:dim(datos)[1]) {
mult = prediccion(wini, datos[i, ])
if(mult != etiquetas[i]) {
fallos = fallos + 1
}
}
print(fallos)
wini
}
pesosSGD = rep(0, dim(datosRL)[2])  # Pesos inicializados a 0
pesosSGD = SGD(datos = datosRL, resultados = etiquetas, nitr = 10000, tminibatches = 0.2, tope = 0.0000001)
x = c(min(datosRL[,1]),max(datosRL[,1]))
y = c(pasoARecta(pesosSGD)[1]*x[1] + pasoARecta(pesosSGD)[2], pasoARecta(pesosSGD)[1]*x[2] + pasoARecta(pesosSGD)[2])
plot(datosRL, col = etiquetas + 3)
abline(pasoARecta(pesosSGD)[2], pasoARecta(pesosSGD)[1], col = "green")
# b)
datosRL_out = simula_unif(N=1000,dim=2,rango=c(0,2))
datosRL_out = cbind(datosRL_out, 1)
x = c(min(datosRL_out[,1]),max(datosRL_out[,1]))
y = c(rectaE[1]*x[1] + rectaE[2], rectaE[1]*x[2] + rectaE[2])
etiquetas = c()
for(i in 1:dim(datosRL_out)[1]) {
etiquetas[i] = fSGD(datosRL_out[i, 1], datosRL_out[i, 2], rectaE[1], rectaE[2])
}
plot(datosRL_out, col = etiquetas + 3)
lines(x, y, type = "l", col = "green")
fallos = 0
for(i in 1:dim(datosRL_out)[1]) {
mult = prediccion(pesosSGD, datosRL_out[i, ])
if(mult >= 0.5)
mult = 1
else
mult = -1
if(mult != etiquetas[i]) {
fallos = fallos + 1
}
}
print(fallos)
plot(datosRL_out, col = etiquetas + 3)
abline(pasoARecta(pesosSGD)[2], pasoARecta(pesosSGD)[1], col = "green")
setwd("~/3-Computacion_y_sistemas_inteligentes/AA/Practicas/Ejercicios")
